name: Terraform Plan

on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        description: The GitHub environment being deployed to
        required: false
        type: string
      REGION:
        description: Region to run job as (prefix only - e.g swc,gwc)
        type: string
        required: true
      CONFIG_FOLDER_PATH:
        description: The base path of the Terraform config you are wanting to plan
        type: string
        required: true

    secrets:
      AZURE_CLIENT_ID:
        description: Azure Client ID of the service principal
        required: false
      AZURE_CLIENT_SECRET:
        description: Azure Client secret of the service principal
        required: false
      AZURE_TENANT_ID:
        description: Azure Azure Tenant containing the service principal
        required: false
      AZURE_SUBSCRIPTION_ID:
        description: Azure subscription where resources should be created
        required: false

permissions:
  id-token: write # Required for fetching an OIDC token.
  contents: read # Required for actions/checkout.
  pull-requests: write # Required to post plan to PR comment.

env:
  ARM_USE_OIDC: true # Don't forget this or you get RBAC errors on things like storage!!

jobs:
  terraform-plan:
    name: terraform-plan
    environment: ${{ inputs.ENVIRONMENT }}
    runs-on: ubuntu-latest

    steps:
      - name: Code checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Azure Login
        uses: azure/login@a457da9ea143d694b1b9c7c869ebb04ebe844ef5 # v2.3.0
        with:
          # Using OIDC so provide Azure vars for login
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_wrapper: false

      - name: Terraform Init
        run: terraform -chdir=${{ inputs.CONFIG_FOLDER_PATH }} init -backend-config=./backend/${{ inputs.REGION }}.cfg

      # Validate terraform files
      - name: Terraform Validate
        run: terraform validate

      # Checks Terraform files formatting
      - name: Terraform Format
        run: terraform fmt -check -recursive

      - name: Checkov Code Scan
        uses: bridgecrewio/checkov-action@99bb2caf247dfd9f03cf984373bc6043d4e32ebf #v12.1347.0
        id: checkov-scan
        with:
          directory: ${{ inputs.CONFIG_FOLDER_PATH }}
          download_external_modules: true
          hard_fail_on: HIGH,CRITICAL
          #output_file_path: console
          output_format: cli
          quiet: true # optional: display only failed checks
        continue-on-error: false

      - name: Terraform Plan
        id: tf-plan
        run: |
          terraform -chdir=${{ inputs.CONFIG_FOLDER_PATH }} plan -input=false -out=tf.plan -var-file=./tfvars/common.tfvars -var-file=./tfvars/${{ inputs.REGION }}.tfvars
        continue-on-error: false

      # Create string output of Terraform Plan
      - name: Create String Output
        id: tf-plan-string
        run: |
          TERRAFORM_PLAN=$(terraform show -no-color tf.plan)

          delimiter="$(openssl rand -hex 8)"
          echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
          echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
          echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo '```terraform' >> $GITHUB_OUTPUT
          echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
          echo '```' >> $GITHUB_OUTPUT
          echo "</details>" >> $GITHUB_OUTPUT
          echo "${delimiter}" >> $GITHUB_OUTPUT

      # Publish Terraform Plan as task summary
      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

      # If this is a PR post the changes
      - name: Push Terraform Output to PR
        if: github.ref != 'refs/heads/main'
        uses: actions/github-script@v7
        env:
          SUMMARY: "${{ steps.tf-plan-string.outputs.summary }}"
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
              const body = `${process.env.SUMMARY}`;
              github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: body
              })
